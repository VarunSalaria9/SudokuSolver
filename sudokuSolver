#include <iostream>
using namespace std;

#define N 9  // Size of the Sudoku grid

// Function to print the Sudoku board
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if placing a number is valid
bool isValid(int board[N][N], int row, int col, int num) {
    // Check if 'num' is not in the current row
    for (int x = 0; x < N; x++) {
        if (board[row][x] == num) {
            return false;
        }
    }
    
    // Check if 'num' is not in the current column
    for (int x = 0; x < N; x++) {
        if (board[x][col] == num) {
            return false;
        }
    }
    
    // Check if 'num' is not in the current 3x3 sub-grid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }
    
    return true;
}

// Function to solve the Sudoku board using backtracking
bool solveSudoku(int board[N][N]) {
    int row, col;
    bool emptyFound = false;
    
    // Find an empty cell
    for (row = 0; row < N; row++) {
        for (col = 0; col < N; col++) {
            if (board[row][col] == 0) {
                emptyFound = true;
                break;
            }
        }
        if (emptyFound) {
            break;
        }
    }
    
    // No empty cell found, puzzle solved
    if (!emptyFound) {
        return true;
    }
    
    // Try numbers 1 to 9 in the empty cell
    for (int num = 1; num <= 9; num++) {
        if (isValid(board, row, col, num)) {
            board[row][col] = num;
            
            // Recur to solve the rest of the board
            if (solveSudoku(board)) {
                return true;
            }
            
            // If the number doesn't lead to a solution, reset the cell
            board[row][col] = 0;
        }
    }
    
    return false;  // Trigger backtracking
}

int main() {
    // Example Sudoku puzzle (0 represents empty spaces)
    int board[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };
    
    cout << "Original Sudoku Puzzle:" << endl;
    printBoard(board);
    cout << "\nSolving...\n" << endl;
    
    if (solveSudoku(board)) {
        cout << "Sudoku Solved Successfully!" << endl;
        printBoard(board);
    } else {
        cout << "No solution exists for the given Sudoku puzzle." << endl;
    }
    
    return 0;
}
